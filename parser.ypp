// Generate C++ code
%language "c++"

// Use a type-save variant data structure for storing values
%define api.value.type variant

// Generate the various `make_<TOKEN>` functions
%define api.token.constructor

// Include the common interfaces in the generated header
%code requires {
    #include "common.hpp"
}

%code provides
{
  // Tell Flex the expected prototype of yylex.
  #define YY_DECL yy::parser::symbol_type yylex()
  // Declare the scanner.
  YY_DECL;
}


%%

%token CLASS_KEYWORD;

%token PUBLIC_KEYWORD;
%token PROTECTED_KEYWORD;
%token PRIVATE_KEYWORD;

%token FINAL_KEYWORD;
%token STATIC_KEYWORD;

%token IF_KEYWORD;
%token WHILE_KEYWORD;
%token FOR_KEYWORD;
%token RETURN_KEYWORD;

%token OPEN_PARENS;
%token CLOSE_PARENS;
%token OPEN_BRACKET;
%token CLOSE_BRACKET;
%token OPEN_SQUARE_BRACKET;
%token CLOSE_SQUARE_BRACKET;
%token EQUALS;
%token EQUALS_EQUALS;
%token COMMA;
%token SEMICOLON;
%token DOT;
%token PLUS;
%token MINUS;
%token LESS_THAN;
%token GREATER_THAN;
%token PLUS_PLUS;
%token MODULO;
// Operator precedence
%left LESS_THAN GREATER_THAN EQUALS_EQUALS;
%left PLUS MINUS MODULO;

%token <std::string> IDENTIFIER;
%token <int> NUMBER;
%token <std::string> STRING;
// %token <bool> BOOLEAN;

classDefinition:
    accessModifier CLASS_KEYWORD IDENTIFIER
    OPEN_BRACKET classBody CLOSE_BRACKET
    {
        std::cout << "Definesc clasa " << $3 << '\n';
    }

%nterm classBody;
classBody:
    definitions

definitions:
    %empty | classOrMethodDefinition definitions

classOrMethodDefinition:
    classVariableDefinition | methodDefinition

classVariableDefinition:
    accessModifier storageModifier typeIdentifier name optionalInitializer SEMICOLON
    {
        std::cout << "Defining class variable " << $4 << '\n';
    }

methodDefinition:
    accessModifier storageModifier typeIdentifier name
    OPEN_PARENS methodArguments CLOSE_PARENS
    OPEN_BRACKET methodBody CLOSE_BRACKET
    {
        std::cout << "Definesc metoda " << $4 << '\n';
    }

methodArguments:
    %empty
    | argument
    | argument COMMA methodArguments

argument:
    typeIdentifier IDENTIFIER

methodBody:
    statements

statements:
    %empty | statement statements

statement:
    variableDeclaration
    | assignment
    | methodCall SEMICOLON
    | ifStatement
    | whileStatement
    | forStatement
    | returnStatement

ifStatement:
    IF_KEYWORD condition block
    {
        std::cout << "if block\n";
    }

whileStatement:
    WHILE_KEYWORD condition block
    {
        std::cout << "while block\n";
    }

    
//https://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.14
postIncrementExpression:
    name PLUS_PLUS

statementExpression:
    assignment
    | postIncrementExpression 
    | methodCall
StatementExpressionList:
    statementExpression
    | StatementExpressionList COMMA statementExpression
forInit:
    variableDeclaration
    {
        std::cout << "for init\n";
    }
    | StatementExpressionList
    {
        std::cout << "for init\n";
    }

   
forUpdate:
    postIncrementExpression
    {
        std::cout << "for update\n";
    }
forStatement:
    FOR_KEYWORD OPEN_PARENS forInit expressionWithPrint SEMICOLON forUpdate CLOSE_PARENS block 
    {
        std::cout << "for block\n";
    }

condition:
    OPEN_PARENS expressionWithPrint CLOSE_PARENS

block:
    OPEN_BRACKET statements CLOSE_BRACKET

variableDeclaration:
    typeIdentifier name optionalInitializer SEMICOLON
    {
        std::cout << "Declar variabila " << $2 << '\n';
    }

assignment:
    name initializer SEMICOLON
    {
        std::cout << "Dau valoare variabilei " << $1 << '\n';
    }

methodCall:
    methodReference
    OPEN_PARENS methodParameters CLOSE_PARENS
    {
        std::cout << "Apelez metoda " << $1 << '\n';
    }

returnStatement:
    RETURN_KEYWORD SEMICOLON
    | RETURN_KEYWORD expressionWithPrint SEMICOLON

methodParameters:
    %empty
    | value
    | value COMMA methodParameters

value:
    expression
    {
        std::cout << "Evaluez expresia " << $1 << '\n';
    }

%nterm <std::string> expression;
expression:
    expression PLUS expression {$$ = $1 + "+" + $3;}
    | expression MINUS expression {$$ = $1 + "-" + $3;}
    | expression LESS_THAN expression {$$ = $1 + "<" + $3;}
    | expression GREATER_THAN expression {$$ = $1 + ">" + $3;}
    | expression MODULO expression {$$ = $1 + "%" + $3;}
    | expression EQUALS_EQUALS expression {$$ = $1 + "==" + $3;}

    | methodCall 
    | name {$$ = $1;}
    | literal {$$ = $1;}


expressionWithPrint:
    expression
    {
        std::cout << "Apelez expresia " << $1 << '\n';
    }
    
%nterm <std::string> methodReference;
methodReference:
    name
    { $$ = $1; }
    | name DOT methodReference
    { $$ = $1 + "." + $3; }

%nterm <AccessModifier> accessModifier;
accessModifier:
    %empty
    { $$ = AccessModifier::DEFAULT; }
    | PUBLIC_KEYWORD
    { $$ = AccessModifier::PUBLIC; }
    | PROTECTED_KEYWORD
    { $$ = AccessModifier::PROTECTED; }
    | PRIVATE_KEYWORD
    { $$ = AccessModifier::PRIVATE; }



%nterm <StorageModifier> storageModifier;
storageModifier:
    %empty
    { $$ = StorageModifier::INSTANCE; }
    | STATIC_KEYWORD
    { $$ = StorageModifier::STATIC; }

typeIdentifier:
    IDENTIFIER
    {
        std::cout << "Referentiez tipul de obiect " << $1 << '\n';
    }
    | IDENTIFIER OPEN_SQUARE_BRACKET CLOSE_SQUARE_BRACKET
    {
        std::cout << "Referentiez tipul de obiect array " << $1 << "[]" << '\n';
    }

%nterm <std::string> name;
name:
    IDENTIFIER

optionalInitializer:
    %empty | initializer

initializer:
    EQUALS expressionWithPrint

%nterm <std::string> literal;
literal:
    STRING | NUMBER
    { $$ = std::to_string($1); }

%%

namespace yy
{
    // Report an error to the user.
    void parser::error(const std::string& message)
    {
        std::cerr << message << '\n';
    }
}

int main(int argc, char* argv[])
{
    if (argc > 1)
    {
        freopen(argv[1], "r", stdin);
    }

    yy::parser java_parser;
    return java_parser();
}
